import{_ as t,o as e,c as a,O as s}from"./chunks/framework.52080d41.js";const y=JSON.parse('{"title":"Stack<T>","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"data-structures/Stack/Stack.md","filePath":"data-structures/Stack/Stack.md"}'),o={name:"data-structures/Stack/Stack.md"},r=s(`<h1 id="stack-t" tabindex="-1"><strong><strong>Stack&lt;T&gt;</strong></strong> <a class="header-anchor" href="#stack-t" aria-label="Permalink to &quot;****Stack&amp;lt;T&amp;gt;****&quot;">​</a></h1><p>Represents a variable size last-in-first-out (LIFO) collection of instances of the same specified type.</p><p>A stack is an abstract data type that serves as a collection of elements, with two main principal operations:</p><ul><li>Push, which adds an element to the collection, and</li><li>Pop, which removes the most recently added element that was not yet removed.</li></ul><p>The order in which elements come off a stack gives rise to its alternative name, LIFO (last in, first out). Additionally, a peek operation may give access to the top without modifying the stack.</p><p><strong>Usage</strong></p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Stack</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">@algoasaurujs/tsds</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// instantiate new Stack</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> stack </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Stack</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h2 id="properties" tabindex="-1"><strong>Properties</strong> <a class="header-anchor" href="#properties" aria-label="Permalink to &quot;**Properties**&quot;">​</a></h2><table><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td><a href="/data-structures/Stack/properties/length.html">length</a></td><td>Gets the number of elements contained in the <code>Stack&lt;T&gt;</code>.</td></tr></tbody></table><h2 id="methods" tabindex="-1"><strong>Methods</strong> <a class="header-anchor" href="#methods" aria-label="Permalink to &quot;**Methods**&quot;">​</a></h2><table><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td><a href="/data-structures/Stack/methods/[iterator].html">[iterator](): Iterator&lt;T, any, undefined&gt;</a></td><td>Returns an iterator over the elements contained in this collection. With iterator protocols you are allowed it to be used with the <code>for...of</code></td></tr><tr><td><a href="/data-structures/Stack/methods/clear.html">clear(): void</a></td><td>Removes all objects from the <code>Stack&lt;T&gt;</code>.</td></tr><tr><td><a href="/data-structures/Stack/methods/includes.html">includes(o: T): boolean</a></td><td>This implementation iterates over the elements in the collection, checking each element in turn for equality with the specified element.</td></tr><tr><td><a href="/data-structures/Stack/methods/isEmpty.html">isEmpty(): boolean</a></td><td>This implementation returns <code>length === 0</code>.</td></tr><tr><td><a href="/data-structures/Stack/methods/iterator.html">iterator(): IterableIterator&lt;T&gt;</a></td><td></td></tr><tr><td><a href="/data-structures/Stack/methods/peek.html">peek(): T</a></td><td>Returns the object at the top of the <code>Stack&lt;T&gt;</code> without removing it.</td></tr><tr><td><a href="/data-structures/Stack/methods/pop.html">pop(): T</a></td><td>Removes and returns the object at the top of the <code>Stack&lt;T&gt;</code>.</td></tr><tr><td><a href="/data-structures/Stack/methods/push.html">push(value: T): void</a></td><td>Inserts an object at the top of the <code>Stack&lt;T&gt;</code>.</td></tr><tr><td><a href="/data-structures/Stack/methods/toArray.html">toArray(): T[]</a></td><td>This implementation returns an array containing all the elements returned by this collection&#39;s iterator, in the same order, stored in consecutive elements of the array, starting with index <code>0</code>. The length of the returned array is equal to the number of elements returned by the iterator, even if the size of this collection changes during iteration, as might happen if the collection permits concurrent modification during iteration. The <code>length</code> property is called only as an optimization hint; the correct result is returned even if the iterator returns a different number of elements.</td></tr></tbody></table>`,11),n=[r];function l(c,i,d,h,p,m){return e(),a("div",null,n)}const f=t(o,[["render",l]]);export{y as __pageData,f as default};
