import{_ as t,o as e,c as a,O as r}from"./chunks/framework.8cfabee1.js";const y=JSON.parse('{"title":"BinaryHeap<T>","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"data-structures/BinaryHeap/BinaryHeap.md","filePath":"data-structures/BinaryHeap/BinaryHeap.md"}'),s={name:"data-structures/BinaryHeap/BinaryHeap.md"},n=r(`<h1 id="binaryheap-t" tabindex="-1"><strong><strong>BinaryHeap&lt;T&gt;</strong></strong> <a class="header-anchor" href="#binaryheap-t" aria-label="Permalink to &quot;****BinaryHeap&amp;lt;T&amp;gt;****&quot;">​</a></h1><p>A Binary Heap is a specialized tree-based data structure which is essentially an almost complete tree that satisfies the Binary Heap property</p><p><strong>Usage</strong></p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">BinaryHeap</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">@algoasaurujs/tsds</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// instantiate new BinaryHeap</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> queue </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">BinaryHeap</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h2 id="properties" tabindex="-1"><strong>Properties</strong> <a class="header-anchor" href="#properties" aria-label="Permalink to &quot;**Properties**&quot;">​</a></h2><table><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td><a href="/tsds/data-structures/BinaryHeap/properties/size.html">size</a></td><td>Gets the number of elements contained in the <code>BinaryHeap&lt;T&gt;</code>.</td></tr></tbody></table><h2 id="methods" tabindex="-1"><strong>Methods</strong> <a class="header-anchor" href="#methods" aria-label="Permalink to &quot;**Methods**&quot;">​</a></h2><table><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td><a href="/tsds/data-structures/BinaryHeap/methods/[iterator].html">[iterator](): Iterator&lt;T, any, undefined&gt;</a></td><td>Returns an iterator over the elements contained in this collection. With iterator protocols you are allowed it to be used with the <code>for...of</code></td></tr><tr><td><a href="/tsds/data-structures/BinaryHeap/methods/_bubbleDown.html">_bubbleDown(startIndex: number): void</a></td><td>Recursively bubbles down a node if it&#39;s in a wrong position</td></tr><tr><td><a href="/tsds/data-structures/BinaryHeap/methods/_bubbleUp.html">_bubbleUp(startIndex: number): void</a></td><td>Recursively bubbles up a node if it&#39;s in a wrong position</td></tr><tr><td><a href="/tsds/data-structures/BinaryHeap/methods/_compareAt.html">_compareAt(i: number, j: number): number</a></td><td>compares two element at index i and j with provided comparator</td></tr><tr><td><a href="/tsds/data-structures/BinaryHeap/methods/_compareChildrenOf.html">_compareChildrenOf(parentIndex: number): number</a></td><td>Compares children of a parent</td></tr><tr><td><a href="/tsds/data-structures/BinaryHeap/methods/_getLetChildIndex.html">_getLetChildIndex(index: number): number</a></td><td>Retrieves the lest child index of the provided parent index</td></tr><tr><td><a href="/tsds/data-structures/BinaryHeap/methods/_getParentIndex.html">_getParentIndex(index: number): number</a></td><td>Retrieves the parent index of the provided child index</td></tr><tr><td><a href="/tsds/data-structures/BinaryHeap/methods/_getRightChildIndex.html">_getRightChildIndex(index: number): number</a></td><td>Retrieves the right child index of the provided parent index</td></tr><tr><td><a href="/tsds/data-structures/BinaryHeap/methods/_hasLeftChild.html">_hasLeftChild(parentIndex: number): boolean</a></td><td>Checks if a parent has a left child</td></tr><tr><td><a href="/tsds/data-structures/BinaryHeap/methods/_hasRightChild.html">_hasRightChild(parentIndex: number): boolean</a></td><td>Checks if a parent has a right child</td></tr><tr><td><a href="/tsds/data-structures/BinaryHeap/methods/_shouldSwap.html">_shouldSwap(parentIndex: number, childIndex: number): boolean</a></td><td>Checks if parent and child should be swapped</td></tr><tr><td><a href="/tsds/data-structures/BinaryHeap/methods/_swap.html">_swap(i: number, j: number): void</a></td><td>Swaps two nodes in the BinaryHeap</td></tr><tr><td><a href="/tsds/data-structures/BinaryHeap/methods/clear.html">clear(): void</a></td><td>Clears <code>BinaryHeap&lt;T&gt;</code>.</td></tr><tr><td><a href="/tsds/data-structures/BinaryHeap/methods/isEmpty.html">isEmpty(): boolean</a></td><td>Checks if the <code>BinaryHeap&lt;T&gt;</code> is empty</td></tr><tr><td><a href="/tsds/data-structures/BinaryHeap/methods/iterator.html">iterator(): IterableIterator&lt;T&gt;</a></td><td></td></tr><tr><td><a href="/tsds/data-structures/BinaryHeap/methods/peek.html">peek(): T</a></td><td>Returns the root node in the BinaryHeap</td></tr><tr><td><a href="/tsds/data-structures/BinaryHeap/methods/pop.html">pop(): T</a></td><td>Removes and returns the root node in the BinaryHeap</td></tr><tr><td><a href="/tsds/data-structures/BinaryHeap/methods/push.html">push(value: T): void</a></td><td>Inserts a new value into the BinaryHeap</td></tr></tbody></table>`,8),d=[n];function o(i,p,l,h,c,u){return e(),a("div",null,d)}const b=t(s,[["render",o]]);export{y as __pageData,b as default};
